import random
from matplotlib.collections import LineCollection
import numpy as np
import matplotlib.pyplot as plt

def simulate_gender(fate):
    if fate == "f":
        return 1
    elif fate == "m":
        return 2

# Function to simulate one step for a single bacterium
def simulate_bacterium(fate):
    if fate == "split":
        # Calculate how  many females and males are produced
        
        return 2  # If the bacterium splits, return 2 for two offspring
    elif fate == "stay":
        return 1  # If the bacterium stays, return 1 for itself
    else:
        return 0  # If the bacterium dies, return 0 for no offspring

def generate_tree_step(tree_levels, lines, level):
    current_level = []
    current_gender_level = []
    females = []
    males = []
    for parent_index, (px, py) in enumerate(tree_levels[level - 1]):
        fate = np.random.choice(['die', 'stay', 'split'], p=[0.1, 0.4, 0.5])
        offspring_count = simulate_bacterium(fate)
        for child in range(offspring_count):
            gender_fate = np.random.choice(['f', 'm'], p=[0.5, 0.5])
            gender = simulate_gender(gender_fate)
            current_gender_level.append(gender)
            # Calculate new position for child
            cx = px + child - offspring_count / 2 + 0.5 * (offspring_count - 1)
            cy = py - 0.6  # Move down the y-axis for child nodes
            while (cx, cy) in current_level:
                cx += 1  # Increment cx until a unique position is found
            current_level.append((cx, cy))
            if gender == 1:
                females.append((cx, cy))
            if gender == 2:
                males.append((cx, cy))
            
            # Add line from parent to child
            lines.append([(px, py), (cx, cy)])
    return current_level, current_gender_level, lines

# Function to generate the tree structure
def generate_tree_graphic(steps=5):
    tree_levels = [[(0, 0)]]  # Starting point of the tree (x, y) coordinates
    gender_levels = [[0]]
    lines = []  # To store lines connecting nodes
    
    for level in range(1, steps + 1):
        print(tree_levels)
        current_level, current_gender_level, lines = generate_tree_step(tree_levels, lines, level)
        print(current_level)
        tree_levels.append(current_level)
        print(tree_levels)
        gender_levels.append(current_gender_level)
    return tree_levels, lines, gender_levels

def get_color(gender):
    if ( gender == 1):
        return 'red'
    elif ( gender == 2):
        return 'blue'
    else:
        return 'black'

def draw_trees(N, steps=5):
    fig, ax = plt.subplots()
    min_value = 0
    max_value = 0
    chldr_cnt = []
    tree_width = 10  # Width of each tree
    lines = []

    
    for i in range(N):
        tree_levels, tree_lines, gender_levels = generate_tree_graphic(steps=steps)
        for level in tree_levels:
            if len(level) > 10:
                tree_width = 20
                break
    
        branchlines = []
        for t in tree_lines:
            t = [(x + i * tree_width, y) for x, y in t]
            branchlines.append(t)
            lines.extend(branchlines)
            branchlines = []

       
        lc = LineCollection(lines, colors='black', linewidths=0.5)
        ax.add_collection(lc)
        lines = []
        
        for j, level in enumerate(tree_levels):
            chldr_cnt.append(len(level))
            xs, ys = zip(*level) if level else ([], [])
            if xs:
                if min(xs) < min_value:
                    min_value = min(xs)
                if max(xs) > max_value:
                    max_value = max(xs)
            for child, (x, y) in zip(gender_levels[j], level):
                ax.plot(x + i * tree_width, y, 'o', markersize=3, color=get_color(child))
            plt.axis('off')
    if xs:
        ax.set_xlim(min_value - 6, max_value + 2 + N * tree_width)
    else:
        ax.set_xlim(-6, 6 + N * tree_width)
    ax.set_ylim(-len(tree_levels)/1.5, 1)

    plt.show()
    


draw_trees(N =2, steps=5)
